
package io.sarl.demos.ants

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.Collection
import java.util.UUID
import io.sarl.core.Lifecycle
import java.util.ArrayList

/** 
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Ant {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	// ID of the environmental agent
	var environment : UUID
	
	var distance : Float[][]
	
	on Initialize {
		// 5 Boids init parameters : UUID envt, Population p, Vector2d initialPosition, Vector2d initialVitesse, String boidName
		if (occurrence.parameters.size > 2) {
			if (occurrence.parameters.get(0) instanceof UUID) {
				environment = occurrence.parameters.get(0) as UUID
			}
			if (occurrence.parameters.get(1) instanceof String) {
				loggingName = occurrence.parameters.get(1) as String
			}
			if (occurrence.parameters.get(2) instanceof Float[][]) {
				distance = occurrence.parameters.get(2) as Float[][]
			}

		}
		if (Settings::isLogActivated) 
		{
			"Ants activated".info
		}
	}
	
	on StartAnt {
		// Matrix of pheromons
		var pheromons : double[][] = occurrence.pheromons
		
		var size = this.distance.length
		var tourLength = 0.0
		
		// Memory of visited cities
		var memory : ArrayList<Integer> = new ArrayList<Integer>
		var citiesToVisit : ArrayList<Integer> = new ArrayList<Integer>
		for(var i = 1; i < size; i++) {
			citiesToVisit.add(i)
		}
		
		var prob : ArrayList<Double> = new ArrayList<Double>
		
		// Every ant start in the first city
		memory.add(0)
		var currentCity = 0

		while (memory.size != size) {
			var sum = 0.0
			for(i : citiesToVisit){
				sum = sum + Math.pow(pheromons.get(currentCity, i), Settings::alpha) *
						Math.pow(1 / this.distance.get(currentCity, i), Settings::beta)
			}
			for(i : citiesToVisit){
				var probabilty = 
					Math.pow(pheromons.get(currentCity, i), Settings::alpha) *
					Math.pow(1 / this.distance.get(currentCity, i), Settings::beta) / sum
				prob.add(probabilty)
			}
			
			var cityChosen = Math.random()
			var cumul = prob.get(0)
			var i = 0
			while (cumul < cityChosen) {
				cumul = cumul + prob.get(i)
				i += 1
			}

			tourLength += this.distance.get(currentCity, citiesToVisit.get(i - 1)) as Double
			currentCity = citiesToVisit.get(i - 1)
			memory.add(currentCity)
			citiesToVisit.remove(i - 1)
		}

		new TourFound(memory, tourLength).emit[it.UUID == this.environment]
		//emit(new TourFound(memory, tourLength))[it.UUID == this.environment]
	}

	on Die {
		killMe
	}

	/************** Boids' behavioral Methods ****************************
	 */
	 
	 /**
	  * The core boids behavior : aggregating all forces into a influence 
	  */


}