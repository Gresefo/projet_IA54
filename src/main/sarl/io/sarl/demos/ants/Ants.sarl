package io.sarl.demos.ants

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.Collection
import java.util.UUID
import io.sarl.core.Lifecycle
import java.util.ArrayList

/** 
 * Ant agent, ants will try to find the shortest tour
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Ant {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	/**
	 * ID of the environment agent
	 */
	var environment : UUID

	/** 
	 * Matrix of the distance between cities
	 */
	var distance : double[][]

	on Initialize {
		// 3 Ant init parameters : UUID envt, String Name, double[][] distanceMatrix
		if (occurrence.parameters.size > 2) {
			if (occurrence.parameters.get(0) instanceof UUID) {
				environment = occurrence.parameters.get(0) as UUID
			}
			if (occurrence.parameters.get(1) instanceof String) {
				loggingName = occurrence.parameters.get(1) as String
			}
			if (occurrence.parameters.get(2) instanceof double[][]) {
				distance = occurrence.parameters.get(2) as double[][]
			}

		}
		if (Settings::isLogActivated) {
			"Ants activated".info
		}
	}

	on StartAnt {
		/** 
		* Pheromones matrix
	 	*/
		var pheromones = occurrence.pheromones

		/** 
		 * Number of city / size of the pheromones matrix and the distance matrix
		 */
		var size = this.distance.length

		/** 
		 * Length of a tour
		 */
		var tourLength = 0.0

		/** 
		 * Memory of visited cities
		 */
		
		var memory : ArrayList<Integer> = new ArrayList<Integer>
		var citiesToVisit : ArrayList<Integer> = new ArrayList<Integer>
		for (var i = 1; i < size; i++) {
			citiesToVisit.add(i)
		}

		/** 
		 * Probability to visit a city
		 */
		var prob : ArrayList<Double> = new ArrayList<Double>

		/** 
		 * Temporary variable to compute the probability of one city to be visited
		 */
		var probability : double

		// Every ant start in the first city
		memory.add(0)
		var currentCity = 0

		while (memory.size != size) {
			// Compute the sum for each neighbor
			var sum = 0.0
			for (i : citiesToVisit) {
				sum = sum + Math.pow(pheromones.get(currentCity, i), Settings::alpha) *
					Math.pow(1 / this.distance.get(currentCity, i), Settings::beta)
			}
			// Compute the probabilty
			for (i : citiesToVisit) {
				probability = Math.pow(pheromones.get(currentCity, i), Settings::alpha) *
					Math.pow(1 / this.distance.get(currentCity, i), Settings::beta) / sum
				prob.add(probability)
			}

			// Choice of town, depending on its probability
			var cityChosen = Math.random()
			var cumul = 0.0
			var i = 0
			while (cumul < cityChosen) {
				cumul = cumul + prob.get(i)
				i += 1
			}

			tourLength += this.distance.get(currentCity, citiesToVisit.get(i - 1))
			currentCity = citiesToVisit.get(i - 1)
			memory.add(currentCity)
			citiesToVisit.remove(i - 1)
			prob.clear()
		}

		tourLength += this.distance.get(currentCity, 0)
		memory.add(0)
		new TourFound(memory, tourLength).emit[it.UUID == this.environment]
	}

	on Die {
		killMe
	}

}
