package io.sarl.demos.ants.gui

import io.sarl.demos.ants.Die
import io.sarl.core.OpenEventSpace
import java.awt.Color
import java.awt.Frame
import java.awt.Graphics
import java.awt.Image
import java.awt.Panel
import java.awt.^event.WindowAdapter
import java.awt.^event.WindowEvent
import java.util.UUID

import java.util.ArrayList
import java.awt.geom.Ellipse2D
import java.awt.Shape
import java.awt.Graphics2D
import io.sarl.demos.ants.Settings
import java.awt.Font
import java.util.List

/** 
 * Graphical user interface for ants.
 */
class EnvironmentGui extends Frame {

	var handler : Closer

	var panel : EnvironmentGuiPanel

	new (comspace : OpenEventSpace, fileName : String, posList : ArrayList<double[]>) {
		super()
		handler = new Closer(this, comspace)
		panel = new EnvironmentGuiPanel(posList)

		this.title = "TSP Simulation : " + fileName
		this.setSize(Settings::EnvtWidth, Settings::EnvtHeight)
		addWindowListener(handler)

		add("Center", panel)
		this.visible = true
	}

	def setTour(tour : ArrayList<Integer>) {
		this.panel.tour = tour
	}
	
	def setTourLength(length : double)
	{
		this.panel.tourLength = length
	}
	
	def setIteration(iteration : int)
	{
		this.panel.iteration = iteration
	}

	override paint(g : Graphics) {
		super.paint(g)
		this.panel.paint(g)
	}

}

package class Closer extends WindowAdapter {
	var ^space : OpenEventSpace
	var iframe : Frame

	new(parent : Frame, comspace : OpenEventSpace) {
		^space = comspace
		iframe = parent
	}

	/** 
	 * Clean the simulation asking the agents to die before disposing the window
	 */
	override windowClosing(^event : WindowEvent) {
		^space.emit(UUID.randomUUID, new Die)
		iframe.dispose();
	}
}

/** 
 * The GUI of the Simulation
 */
package class EnvironmentGuiPanel extends Panel {

	/** 
	 * Double buffering management.
	 */
	var myGraphics : Graphics
	/** 
	 * Double buffering management.
	 */
	var myCanvas : Graphics
	/** 
	 * Double buffering management.
	 */
	var myImage : Image
	
	/**
	 * The list of town positions
	 */
	var posList : ArrayList<double[]>

	/**
	 * The tour between towns to print
	 */
	var tour : ArrayList<Integer>
	/**
	 * The tour length
	 */
	var tourLength : double
	
	var iteration : int

	def setTour(tour : ArrayList<Integer>) {
		this.tour = tour
	}
	
	def setTourLength(length : double)
	{
		this.tourLength = length
	}

	def setIteration(iteration : int) {
		this.iteration = iteration
	}

	/**
	 * Constructor
	 * @param iheight : int
	 */
	new (_posList : ArrayList<double[]>) {
		super()
		this.posList = _posList
	}

	override paint(g : Graphics) 
	{
		if ((myCanvas !== null) && (myGraphics !== null)) 
		{
			val bgColor = new Color(0.6F, 0.6F, 0.6F)
			myCanvas.color = bgColor
			myCanvas.fillRect(0, 0, Settings::EnvtWidth * 2 - 1, Settings::EnvtHeight * 2 - 1)
			myCanvas.setColor(Color::BLACK)
			myCanvas.drawRect(0, 0, Settings::EnvtWidth * 2 - 1, Settings::EnvtHeight * 2 - 1)
			
			var maxCoord : List<Integer> = getMaxCoord(posList)
			
			//Draw the tour between towns and print the tour length
			if (this.tour !== null) 
			{
				var linePixelList : ArrayList<int[]> = getRectPixel(this.posList, this.tour, maxCoord)
				for (line : linePixelList) 
					myCanvas.drawLine(line.get(0), line.get(1), line.get(2), line.get(3))
					
				myCanvas.drawString("Tour length : " + tourLength as int, Settings.EnvtWidth - 300, Settings.EnvtHeight - 60)
				myCanvas.drawString("Number of remaining iterations (over " + Settings.iteration + ") : " 
					+ (Settings.iteration - iteration), 
					0, Settings.EnvtHeight - 60
				)
				myCanvas.setFont(new Font("Arial", Font.PLAIN, 24))
			}
			
			for (pos : posList) 
				paintTown(myCanvas as Graphics2D, pos, maxCoord)

			myGraphics.drawImage(myImage, 0, 0, this)
		}
	}

	def update(g : Graphics) {
		g.paint
	}

 	override doLayout {
		super.doLayout

		myImage = createImage(width * 2, height * 2)
		myCanvas = myImage.graphics
		myGraphics = this.graphics
	}

	/**
	 * Paint on the graphic every town in the position list
	 * @param g : Graphics2D, the graphic we print in
	 * @param pos : double[], the list containing the town positions
	 * @param maxCoord : int, the maximum coordinate to do the resizing
	 */
	def paintTown(g : Graphics2D, pos : double[], maxCoord : List<Integer>)
	{
		var coord : double[] = newDoubleArrayOfSize(2)
		coord.set(0, pos.get(1))
		coord.set(1, pos.get(2))
		var pixel : int[] = pixelResizing(coord, maxCoord)
		var circle : Shape = new Ellipse2D.Double(pixel.get(0) - 8, pixel.get(1) - 8, 16, 16);

		g.color = Color.RED
		g.fill(circle)
		g.draw(circle)
	}
	
	/**
	 * Return the maximum coordinate you can find in the position list
	 * @param posList : ArrayList<double[]> the list of position of every town
	 * @return List<Integer> : - the min X coordinate
	 * 						   - the min Y coordinate
	 * 						   - the max(maxX - minX, maxY - minY)
	 */
	private def getMaxCoord(posList : ArrayList<double[]>) : List<Integer>
	{
		var result : List<Integer> = new ArrayList<Integer>
		var maxX : double = 0
		var minX : double = 1000000000
		var maxY : double = 0
		var minY : double = 1000000000
		
		for(pos : posList)
		{
			if(pos.get(1) > maxX)
				maxX = pos.get(1)
			if(pos.get(2) > maxY)
				maxY = pos.get(2)
			if(pos.get(1) < minX)
				minX = pos.get(1)
			if(pos.get(2) < minY)
				minY = pos.get(2)
		}
		result.add(minX as int)
		result.add(minY as int)
		if(maxX - minX > maxY - minY)
			result.add((maxX - minX) as int)
		else
			result.add((maxY - minY) as int)
		return result
	}
	
	/**
	 * Return the pixel value based on the size of the screen and the maximum coordinate
	 * @param coord : double[], the coordinate to translate in pixel, X and Y
	 * @param maxCoord : int, the biggest coordinate in the list
	 * @return int[2], the pixels to print 
	 */
	private def pixelResizing(coord : double[], maxCoord : List<Integer>) : int[]
	{
		var result : int[] = newIntArrayOfSize(2)
		result.set(0, ((coord.get(0) - maxCoord.get(0)) * (Settings.EnvtWidth -150) / maxCoord.get(2) + 25) as int)
		result.set(1, ((coord.get(1) - maxCoord.get(1)) * (Settings.EnvtHeight -150) / maxCoord.get(2) + 25) as int)
		return result
	}
	
	/**
	 * Find a town coordinates from its ID in the position list
	 * @param posList : ArrayList<double[]>, the position list
	 * @param id : int, the ID of the town to find
	 * @return double[2], the town coordinates
	 */
	@SuppressWarnings("discouraged_reference")
	private def getCoordFromTownId(posList : ArrayList<double[]>, id : int) : double[]
	{
		var result : double[] = newDoubleArrayOfSize(2)
		var i : int = 0
		while(i < posList.size - 1 && (posList.get(i).get(0) as int) != id)
		{
			i++
		}

		if(posList.get(i).get(0) as int == id)
		{
			result.set(0, posList.get(i).get(1))
			result.set(1, posList.get(i).get(2))
		}
		else
			System.err.println("Error, coordinate not found with this ID : " + id)
		return result
	}
	
	/**
	 * Return the coordinates of the pixel of the rectangle to draw between each town
	 * @param posList : ArrayList<double[]> : the position list of every town
	 * @param travelorder : ArrayList<Integer> : the path between the town
	 * @param maxCoord : int, the max coordinate to do the resizing
	 * @return ArrayList<int[]> : the pixel list of each corner of the rectangle to drawa
	 */
	 private def getRectPixel(posList : ArrayList<double[]>, travelOrder : ArrayList<Integer>, maxCoord : List<Integer>) : ArrayList<int[]>
	 {
	 	var rectPixelList : ArrayList<int[]> = new ArrayList<int[]>()
	 	var size : int = travelOrder.size
	 	
	 	for(var i : int = 0; i < size - 1; i++)
	 	{
	 		var intArray : int[] = newIntArrayOfSize(4)
	 		var coord1 : double[] = getCoordFromTownId(posList, travelOrder.get(i))
	 		var coord2 : double[] = getCoordFromTownId(posList, travelOrder.get(i + 1))
	 		
	 		var pixel1 : int[] = pixelResizing(coord1, maxCoord)
			var pixel2 : int[] = pixelResizing(coord2, maxCoord)
	 		intArray.set(0, pixel1.get(0))
			intArray.set(1, pixel1.get(1))
			intArray.set(2, pixel2.get(0))
			intArray.set(3, pixel2.get(1))
			rectPixelList.add(intArray)
	 	}
		
	 	return rectPixelList
	 }
}
