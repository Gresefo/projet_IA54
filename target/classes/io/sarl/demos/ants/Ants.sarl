
package io.sarl.demos.ants

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.Collection
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import io.sarl.core.Lifecycle

/** 
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Boid {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	// ID of the environmental agent
	var environment : UUID

	var position : Vector2d

	var speed : Vector2d

	var group : Population

	on Initialize {
		// 5 Boids init parameters : UUID envt, Population p, Vector2d initialPosition, Vector2d initialVitesse, String boidName
		if (occurrence.parameters.size > 4) {
			if (occurrence.parameters.get(0) instanceof UUID) {
				environment = occurrence.parameters.get(0) as UUID
			}

			if (occurrence.parameters.get(1) instanceof Population) {
				group = occurrence.parameters.get(1) as Population
			}

			if (occurrence.parameters.get(2) instanceof Vector2d) {
				position = occurrence.parameters.get(2) as Vector2d
			}
			if (occurrence.parameters.get(3) instanceof Vector2d) {
				speed = occurrence.parameters.get(3) as Vector2d
				speed.length = 0.25
				speed += new Vector2d(0, 0.75)
				speed.scale(group.maxSpeed)
			}
			if (occurrence.parameters.get(4) instanceof String) {
				loggingName = occurrence.parameters.get(4) as String
			}

		}
		if (Settings::isLogActivated) 
		{
			"Ants activated".info
		}
	}

	on Perception {
		var boids = occurrence.perceivedAgentBody
		var myBody = boids.get(ID)
		if ((myBody !== null) && (myBody.owner == this.ID)) {
			// Update boids' speed and position according to the new environmental data
			this.position = myBody.position
			this.speed = myBody.vitesse
		}
		in(Settings::pause) [
			emit(new Action => [influence = think(boids.values)])[it.UUID == this.environment]

			if (Settings::isLogActivated) {
				info("Sending Influences.")
			}
		]
	}

	on Die {
		killMe
	}

	/************** Boids' behavioral Methods ****************************
	 */
	 
	 /**
	  * The core boids behavior : aggregating all forces into a influence 
	  */
	def think(perception : Collection<PerceivedAntBody>) : Vector2d {
		if (perception !== null) {
			var force : Vector2d
			var influence = new Vector2d

			influence.set(0, 0)

			if (group.separationOn) {
				force = perception.separation
				force.scale(group.separationForce)
				influence += force
			}

			if (group.cohesionOn) {
				force = perception.cohesion
				force.scale(group.cohesionForce)
				influence += force
			}

			if (group.alignmentOn) {
				force = perception.alignment
				force.scale(group.alignmentForce)
				influence += force
			}

			if (group.repulsionOn) {
				force = perception.repulsion
				force.scale(group.repulsionForce)
				influence += force
			}

			if (influence.length > group.maxForce) {
				influence.length = group.maxForce
			}

			influence.scale(1 / group.mass)

			return influence
		}
	}

	/** 
	 * Determine whether a body is visible or not according to the perception range
	 */
	def isVisible(otherBoid : PerceivedAntBody, distance : double) : boolean {
		var tmp = otherBoid.position - position

		if (tmp.length > distance)
			return false

		var tmp2 = speed.clone
		tmp2.normalize

		if (tmp2 * tmp < group.visibleAngleCos)
			return false

		return true
	}

	/** Compute the separation force.
	 */
	def separation(otherBoids : Collection<PerceivedAntBody>) : Vector2d {
		var force = new Vector2d
		var len = 0.0

		for(otherBoid : otherBoids)
		{
			if(otherBoid !== null && otherBoid.owner != this.ID && otherBoid.group == group && (isVisible(otherBoid, group.distSeparation)))
			{
				var tmp = position - otherBoid.position
				len = tmp.length
				
				tmp.scale(1.0 / (len**2))
				force += tmp
			}
		}
		
		return force
	}

	/** Compute the cohesion force.
	 */
	def cohesion(otherBoids : Collection<PerceivedAntBody>) : Vector2d {
		var nbTot = 0
		var force = new Vector2d

		for(otherBoid : otherBoids)
		{
			if(otherBoid !== null && otherBoid.owner != this.ID && otherBoid.group == this.group && (isVisible(otherBoid, group.distCohesion)))
			{
				nbTot++
				force += otherBoid.position
			}
		}
		
		if(nbTot > 0)
		{
			force.scale(1.0/nbTot)
			force -= position
		}

		return force
	}

	/** Compute the alignment force.
	 */
	def alignment(otherBoids : Collection<PerceivedAntBody>) : Vector2d {
		var nbTot = 0
		var tmp = new Vector2d
		var force = new Vector2d

		for(otherBoid : otherBoids)
		{
			if (otherBoid !== null && otherBoid.owner != this.ID && otherBoid.group == this.group && (isVisible(otherBoid, group.distCohesion))) 
			{
				nbTot++
				tmp.set(otherBoid.vitesse)
				tmp.scale(1.0 /tmp.length)
				force += tmp
			}
		}
		
		if(nbTot > 0)
		{
			force.scale(1.0/nbTot)
		}

		return force
	}

	/** 
	 * Compute the repulsion force.
	 * SÃ©paration mais avec les autres groupes
	 *
	 */
	def repulsion(otherBoids : Collection<PerceivedAntBody>) : Vector2d {
		var force = new Vector2d
		var len = 0.0

		for (otherBoid : otherBoids) 
		{
			if (otherBoid !== null && otherBoid.owner != this.ID && otherBoid.group != this.group && (isVisible(otherBoid, group.distCohesion))) 
			{
				var tmp = position - otherBoid.position
				len = tmp.length

				tmp.scale(1.0 / (len ** 2))
				force += tmp
			}
		}
		return force
	}


}
