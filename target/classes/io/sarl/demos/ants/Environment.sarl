
package io.sarl.demos.ants

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentSkipListSet
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.eclipse.xtend.lib.annotations.Accessors
import io.sarl.core.Lifecycle

/** 
 * The environmental agent in charge of collecting ants influences and computing the new state of the virtual world
 */
agent Environment {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	@Accessors
	var width : int

	@Accessors
	var height : int

	@Accessors
	var ants : ConcurrentHashMap<UUID, PerceivedAntBody>

	// Set of ants ID who has sent their influence in the current time step
	@Accessors
	var influences : ConcurrentSkipListSet<UUID>

	on Initialize 
	{
		loggingName = "Environment"
		// Environment init parameters : An Integer the grid's height, An integer the grid's width
		if (occurrence.parameters.size > 1) {
			if (occurrence.parameters.get(0) instanceof Integer) {
				height = occurrence.parameters.get(0) as Integer
			}

			if (occurrence.parameters.get(1) instanceof Integer) {
				width = occurrence.parameters.get(1) as Integer
			}
			ants = null
			influences = new ConcurrentSkipListSet
		}
	}

	on Start {
		this.ants = occurrence.perceivedAgentBody
		new GuiRepaint(ants).emit
		new Perception(ants).emit
	}

	on Action 
	{
		// TODO 5 Complete Environment behavior : collecting influences from all agents, updating environmental state, sending perceptions, refreshing GUI
        synchronized (ants) 
        {
			synchronized (influences) 
			{
				if (ants.containsKey(occurrence.source.UUID)) 
				{
					this.influences.add(occurrence.source.UUID)
					applyForce(occurrence.influence, ants.get(occurrence.source.UUID))
				}

				if (this.influences.size == this.ants.size) 
				{
					in(Settings::pause) [
						new GuiRepaint(ants).emit[it.UUID == Simulation.id]
						new Perception(ants).emit
						if (Settings::isLogActivated) 
						{
							info("New Simulation Step.")
                        }
                    ]
                    this.influences.clear
                }
            }
        }
    }

	on Die {
		killMe
	}

	def applyForce(force : Vector2d, b : PerceivedAntBody) {
		// limiting/clamping the applied force
		if (force.length > b.group.maxForce) {
			force.length = b.group.maxForce
		}

		// contribution of the mass.
		// force * (1 / b.getGroupe().masse);
		// updating acceleration and speed.
		var acceleration = b.acceleration
		acceleration.set(force)
		var vitesse = b.vitesse
		vitesse += acceleration

		// updating speed
		if (vitesse.length > b.group.maxSpeed) {
			vitesse.length = b.group.maxSpeed
		}

		// updating the position
		var position = b.position
		position += vitesse

		var bb = ants.get(b.owner)
		bb.acceleration = acceleration
		bb.vitesse = vitesse
		bb.position = position

		// we adjust it according to the dimensions of the World.
		b.clampToWorld
	}

	/** 
	 * The world is circular, this function clamps coordinates to stay within the frame
	 */
	def clampToWorld(b : PerceivedAntBody) {
		var posX = b.position.x
		var posY = b.position.y

		if (posX > width / 2) {
			posX -= width
		}
		if (posX < ( -1 * width / 2 )) {
			posX += width
		}
		if (posY > height / 2) {
			posY -= height
		}
		if (posY < ( -1 * height / 2 )) {
			posY += height
		}

		ants.get(b.owner).position = new Vector2d(posX, posY)
	}

}
