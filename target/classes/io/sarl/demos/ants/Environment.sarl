package io.sarl.demos.ants

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentSkipListSet

import org.eclipse.xtend.lib.annotations.Accessors
import io.sarl.core.Lifecycle
import java.util.ArrayList
import java.util.concurrent.CopyOnWriteArrayList

/** 
 * The environmental agent in charge of collecting ants influences and computing the new state of the virtual world
 */
agent Environment {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	/** 
	 * Matrix of distance between cities
	 */
	var distMatrix : double[][]

	/** 
	 * Number of ants searching a tour
	 */
	var numberAnts : int

	/** 
	 * Pheromones matrix for each edge
	 */
	var pheromones : double[][]

	/** 
	 * A thread safe List<Pair> to store the list of :
	 * - List<Integer> : the path with the town ID
	 * - Double : the path length
	 */
	var tourArray : CopyOnWriteArrayList<Pair<ArrayList<Integer>, Double>>

	/** 
	 * The current iteration number 
	 */
	var iteration : int

	/** 
	 * Used to check if the result converged
	 */
	var lastTour : ArrayList<Double>

	var saveBestTour : Pair<ArrayList<Integer>, Double>

	on Initialize {
		loggingName = "Environment"
		// Environment init parameters : An Integer the grid's height, An integer the grid's width
		if (occurrence.parameters.size > 1) {
			if (occurrence.parameters.get(0) instanceof double[][]) {
				distMatrix = occurrence.parameters.get(0) as double[][]
			}
			if (occurrence.parameters.get(1) instanceof Integer) {
				numberAnts = occurrence.parameters.get(1) as Integer
			}
		}
		if (Settings::isLogActivated) {
			"Environment activated".info
		}
	}

	on StartEnvironment {
		info("ENV STARTED")
		this.tourArray = new CopyOnWriteArrayList<Pair<ArrayList<Integer>, Double>>
		this.lastTour = new ArrayList<Double>
		this.saveBestTour = new Pair<ArrayList<Integer>, Double>(new ArrayList<Integer>, new Double(-1))

		this.iteration = 0
		var nnTourLength = nearestNeighbour(this.distMatrix)

		var size = this.distMatrix.length
		pheromones = newDoubleArrayOfSize(size, size)
		for (var i = 0; i < size; i++) {
			for (var j = 0; j < size; j++) {
				if (i == j) {
					this.pheromones.set(i, j, 0.0)
				} else {
					this.pheromones.set(i, j, this.numberAnts / nnTourLength)
				}
			}
		}

		new StartAnt(this.pheromones).emit
	}

	on TourFound {
		synchronized (this.tourArray) {
			this.tourArray.add(new Pair(occurrence.tour, occurrence.length))

			if (this.tourArray.size == this.numberAnts) {
				var phero : double
				var min : double = this.tourArray.get(0).getValue
				var indexBestTour = 0
				var k = 0

				// Pheromone evaporation
				for (var i = 0; i < this.numberAnts; i++) {
					for (var j = 0; j < this.numberAnts; j++) {
						if (i != j) {
							phero = this.pheromones.get(i, j) * (1 - Settings::rho)
							this.pheromones.set(i, j, phero)
						}
					}
				}

				// Get shortest path and update pheromones
				for (tA : this.tourArray) {
					// Gets shortest path
					if (tA.getValue < min) {
						min = tA.getValue
						indexBestTour = k
					}
					k++
					// Update the pheromons matrix, increase visited path depending on the path length
					phero = 1 / tA.getValue
					for (var i = 0; i < this.numberAnts - 1; i++) {
						this.pheromones.set(
							tA.getKey.get(i),
							tA.getKey.get(i + 1),
							this.pheromones.get(tA.getKey.get(i), tA.getKey.get(i + 1)) + phero
						)
					}
				}

				info("Best tour : " + this.tourArray.get(indexBestTour).getValue)

				// Send event to repaint
				var tmpList : ArrayList<Integer> = new ArrayList<Integer>()
				for (var i = 0; i < this.tourArray.get(indexBestTour).getKey.size; i++)
					tmpList.add(this.tourArray.get(indexBestTour).getKey.get(i) + 1)
				new GuiRepaint(tmpList, this.tourArray.get(indexBestTour).getValue, this.iteration).emit [
					it.UUID == Simulation.id
				]

				// Save the best tour
				if (this.saveBestTour.getValue == -1 || this.tourArray.get(indexBestTour).getValue <
					this.saveBestTour.getValue) {
					this.saveBestTour = new Pair(this.tourArray.get(indexBestTour).getKey,
						this.tourArray.get(indexBestTour).getValue)
				}

				// If last iteration, kill all
				if (this.iteration == Settings::iteration) {
					printPheromoneMatrix(this.pheromones, 25)

					info("KILL AGENTS")
					info("Tour : " + this.tourArray.get(indexBestTour).getKey)

					// Send the best tour to repaint
					tmpList.clear()
					for (var i = 0; i < this.saveBestTour.getKey.size; i++)
						tmpList.add(this.saveBestTour.getKey.get(i) + 1)
					info("BEST TOUR WHEN STOPPED : " + this.saveBestTour.getValue())
					new GuiRepaint(tmpList, this.saveBestTour.getValue, this.iteration).emit [
						it.UUID == Simulation.id
					]

					new Die().emit
				} else {
					var size = this.lastTour.size
					// Check convergence
					/*
					 * Variable to count the number of identical result
					 */
					var same = 0
					if (size >= Settings::nbIterationToConverge) {
						for (var i = size - Settings::nbIterationToConverge; i < size; i++) {
							if (Math.abs(this.tourArray.get(indexBestTour).getValue - this.lastTour.get(i)) < 1.0) {
								same++
							}
						}
					}
					if (same == Settings::nbIterationToConverge) {
						info("Stopped at iteration : " + this.iteration)
						printPheromoneMatrix(this.pheromones, 25)

						info("KILL AGENTS")
						info("Tour : " + this.tourArray.get(indexBestTour).getKey)

						// Send the best tour to repaint
						tmpList.clear()
						for (var i = 0; i < this.saveBestTour.getKey.size; i++)
							tmpList.add(this.saveBestTour.getKey.get(i) + 1)
						info("BEST TOUR WHEN STOPPED : " + this.saveBestTour.getValue())
						new GuiRepaint(tmpList, this.saveBestTour.getValue, this.iteration).emit [
							it.UUID == Simulation.id
						]

						new Die().emit
					} else {
						this.lastTour.add(this.tourArray.get(indexBestTour).getValue)
						this.tourArray.clear
						this.iteration++
						new StartAnt(this.pheromones).emit
					}
				}
			}
		}
	}

	on Die {
		killMe
	}

	/** 
	 * Calculate a tour using the nearest neighbor algorithm
	 * @param distMatrix : double[][], the matrix distance
	 * @return double : the length of the path
	 */
	def nearestNeighbour(distMatrix : double[][]) : double {
		var tourLength = 0.0
		var size = this.distMatrix.length

		var tour : ArrayList<Integer> = new ArrayList<Integer>
		var citiesToVisit : ArrayList<Integer> = new ArrayList<Integer>
		for (var i = 1; i < size; i++) {
			citiesToVisit.add(i)
		}

		tour.add(0)
		var currentCity = 0
		var index = 0
		var min = 0.0

		while (tour.size != size) {
			if (currentCity == 0) {
				min = distMatrix.get(currentCity, 1)
				index = 1
			} else {
				min = distMatrix.get(currentCity, 0)
				index = 0
			}
			for (i : citiesToVisit) {
				if (distMatrix.get(currentCity, i) < min) {
					min = distMatrix.get(currentCity, i)
					index = i
				}
			}
			tourLength += distMatrix.get(currentCity, index)
			currentCity = index
			tour.add(currentCity)
			citiesToVisit.remove(currentCity as Integer)
		}
		tourLength += distMatrix.get(currentCity, 0)
		return tourLength
	}

	/** 
	 * Prints the pheromone matrix as double
	 * @param distMatrix : double [][], the distance matrix to print
	 * @param maxSize : int, the maximum size of value to print. If maxSize = 5, it will only print the 5x5 matrix (the top left corner)
	 */
	def printPheromoneMatrix(distMatrix : double[][], maxSize : int) : void {
		var maxSize2 : int = maxSize
		if (maxSize > distMatrix.size)
			maxSize2 = distMatrix.size

		System.out.println("Pheromone Matrix (size printed: " + maxSize2 + "):")
		for (var i : int = 0; i < maxSize2; i++) {
			for (var j : int = 0; j < maxSize2; j++) {
				System.out.print(" " + distMatrix.get(i).get(j) as double)
				if (distMatrix.get(i).get(j) < 10)
					System.out.print("    ")
				else if (distMatrix.get(i).get(j) < 100)
					System.out.print("   ")
				else if (distMatrix.get(i).get(j) < 1000)
					System.out.print("  ")
				else if (distMatrix.get(i).get(j) < 10000)
					System.out.print(" ")
			}
			System.out.println()
		}
		
	}

}
