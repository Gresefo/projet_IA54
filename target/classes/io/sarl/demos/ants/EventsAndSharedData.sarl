
package io.sarl.demos.ants

import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.eclipse.xtend.lib.annotations.Accessors
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import java.util.ArrayList

/**
 * Event from the GUI to kill each agent to end the simulation before closing the main window
 */
event Die

/**
 * Event from a boid to the environment containing his corresponding influence for the current simulation step.
 * @author Nicolas Gaud
 */
event Action {
	var influence : Vector2d
}

/** 
 * Event from the environment to the boids with the global state of the environment, could be optimized to reduce it to the true local perception of each boids
 * @author Nicolas Gaud
 */
event Perception {
	val perceivedAgentBody : ConcurrentHashMap<UUID, PerceivedAntBody>
	
	new (bodies : ConcurrentHashMap<UUID, PerceivedAntBody>) {
		perceivedAgentBody = new ConcurrentHashMap<UUID, PerceivedAntBody>(bodies);
	}
}

/** 
 * Event informing the environment from the real startup of the simulation with the corresponding boids inside
 * @author Nicolas Gaud
 */
event Start {
	val perceivedAgentBody : ConcurrentHashMap<UUID, PerceivedAntBody>

	new (bodies : ConcurrentHashMap<UUID, PerceivedAntBody>) {
		perceivedAgentBody = new ConcurrentHashMap<UUID, PerceivedAntBody>(bodies);
	}
	
}

event StartAnt {
	var pheromons : Double[][]
}

event TourFound {
	val tour : ArrayList<Integer>
	val length : Double
	
	new (tour : ArrayList<Integer>, length : Double) {
		this.tour = tour
		this.length = length
	}
}

/** 
 * Event specifying when the GUI must be refresh according to the new environmental state embodied by the specified map
 * @author Nicolas Gaud
 */
event GuiRepaint {
	val perceivedAgentBody : ConcurrentHashMap<UUID, PerceivedAntBody>

	new (bodies : ConcurrentHashMap<UUID, PerceivedAntBody>) {
		perceivedAgentBody = new ConcurrentHashMap<UUID, PerceivedAntBody>(bodies);
	}

}

/** 
 * The representation of a boid in the environment : his physical body
 *
 * @author Nicolas Gaud 
 */
class PerceivedAntBody {

	// Position of the body
	@Accessors
	var position : Vector2d

	// Address of the body's owner
	@Accessors
	var owner : UUID

	// Agent's speed
	@Accessors
	var vitesse : Vector2d

	// Acceleration
	@Accessors
	var acceleration : Vector2d

	// Population of the agent
	@Accessors
	var group : Population

	new (igroup : Population, iowner : UUID, iposition : Vector2d, ispeed : Vector2d) {
		position = iposition
		owner = iowner
		vitesse = ispeed
		acceleration = new Vector2d
		group = igroup
	}

}
