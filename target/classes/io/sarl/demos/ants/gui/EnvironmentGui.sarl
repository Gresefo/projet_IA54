package io.sarl.demos.ants.gui

import io.sarl.demos.ants.Die
import io.sarl.core.OpenEventSpace
import java.awt.Color
import java.awt.Frame
import java.awt.Graphics
import java.awt.Image
import java.awt.Panel
import java.awt.^event.WindowAdapter
import java.awt.^event.WindowEvent
import java.util.Map
import java.util.UUID

import static extension java.lang.Math.*
import io.sarl.demos.ants.PerceivedAntBody
import java.util.ArrayList
import java.awt.geom.Ellipse2D
import java.awt.Shape
import java.awt.Graphics2D
import io.sarl.demos.ants.Settings

/** 
 * Graphical user interface for ants.
 */
class EnvironmentGui extends Frame {

	var handler : Closer

	var panel : EnvironmentGuiPanel

	new (comspace : OpenEventSpace, iheight : int, iwidth : int,
		fileName : String, posList : ArrayList<double[]>) {
		super()
		handler = new Closer(this, comspace)
		panel = new EnvironmentGuiPanel(iheight, iwidth, posList)

		this.title = "TSP Simulation : " + fileName
		this.setSize(iwidth, iheight)
		addWindowListener(handler)

		add("Center", panel)
		this.visible = true
	}

	def setBoids(boids : Map<UUID, PerceivedAntBody>) {
		this.panel.boids = boids
	}

	override paint(g : Graphics) {
		super.paint(g)
		this.panel.paint(g)
	}

}

package class Closer extends WindowAdapter {
	var ^space : OpenEventSpace
	var iframe : Frame

	new(parent : Frame, comspace : OpenEventSpace) {
		^space = comspace
		iframe = parent
	}

	/** 
	 * Clean the simulation asking the agents to die before disposing the window
	 */
	override windowClosing(^event : WindowEvent) {
		^space.emit(UUID.randomUUID, new Die)
		iframe.dispose();
	}

}

/** 
 * The GUI of the Simulation
 * 
 * @author Nicolas GAUD
 */
package class EnvironmentGuiPanel extends Panel {

		/** 
		 * Double buffering management.
		 */
	var myGraphics : Graphics
	/** 
	 * Double buffering management.
	 */
	var myCanvas : Graphics

	/** 
	 * Double buffering management.
	 */
	var myImage : Image

	var width : int

	var height : int

	var posList : ArrayList<double[]>

	var boids : Map<UUID, PerceivedAntBody>

	def setBoids(boids : Map<UUID, PerceivedAntBody>) {
		this.boids = boids
	}

	new (iheight : int, iwidth : int, _posList : ArrayList<double[]>) {
		super()
		width = iwidth
		height = iheight
		this.posList = _posList
	}

	override paint(g : Graphics) {
		if ((myCanvas !== null) && (myGraphics !== null)) {
			val bgColor = new Color(0.6F, 0.6F, 0.6F)
			myCanvas.color = bgColor
			myCanvas.fillRect(0, 0, width * 2 - 1, height * 2 - 1)
			myCanvas.setColor(Color::BLACK)
			myCanvas.drawRect(0, 0, width * 2 - 1, height * 2 - 1)

			var maxCoord : int = getMaxCoord(posList)
			for (pos : posList) 
				paintBoid(myCanvas as Graphics2D, pos, maxCoord)

			myGraphics.drawImage(myImage, 0, 0, this)
		}
	}

	def update(g : Graphics) {
		g.paint
	}

	override doLayout {
		super.doLayout

		width = (this.size.width / 2)
		height = this.size.height / 2

		myImage = createImage(width * 2, height * 2)
		myCanvas = myImage.graphics
		myGraphics = this.graphics
	}

	
	def paintBoid(g : Graphics2D, pos : double[], maxCoord : int) 
	{
		var posX = pos.get(1) * (Settings.EnvtWidth - 50) / maxCoord as int
		var posY = pos.get(2) * (Settings.EnvtHeight - 50 ) / maxCoord as int

		var circle : Shape = new Ellipse2D.Double(posX, posY, 15, 15);

		g.color = Color.RED
		g.fill(circle)
		g.draw(circle)

		// g.drawLine(posX + ( 5 * cos ) as int, posY + ( 5 * sin ) as int, posX - ( 2 * cos + 2 * sin ) as int,
		// posY - ( 2 * sin - 2 * cos ) as int)
		// g.drawLine(posX + ( 5 * cos ) as int, posY + ( 5 * sin ) as int, posX - ( 2 * cos - 2 * sin ) as int,
		// posY - ( 2 * sin + 2 * cos ) as int)
		// g.drawLine(posX - ( 2 * cos + 2 * sin ) as int, posY - ( 2 * sin - 2 * cos ) as int,
		// posX - ( 2 * cos - 2 * sin ) as int, posY - ( 2 * sin + 2 * cos ) as int)
	}

	//	private static def getAngle(v : Vector2d) : double {
	// var zero = 1E-9
	// if ((v.x * v.x) < zero) {
	// if(v.y >= 0) return (PI / 2)
	// return (-1 * PI / 2)
	// }
	// if(v.x >= 0) return (v.y / v.x).atan
	// if(v.y >= 0) return ( PI + (v.y / v.x).atan )
	// return ( (v.y / v.x).atan - PI )
	//	}
	
	/**
	 * Return the maximum coordinate you can find in the position list
	 * @param posList : ArrayList<double[]> the list of position of every town
	 * @return int : the maximum coordinate
	 */
	private def getMaxCoord(posList : ArrayList<double[]>) : int
	{
		var max : double = 0
		for(pos : posList)
		{
			if(pos.get(1) > max)
				max = pos.get(1)
			if(pos.get(2) > max)
				max = pos.get(2)
		}
		return max as int
	}
}
